I"<p>In the course of load testing a new system, we gathered the output from <a href="http://man.cx/iostat">iostat</a> from a group of servers. In addition to parsing through the device statistics, we thought it would be handy to graph the CPU stats as well. We set iostat to run every five seconds and captured the output in a text file, one per server. This gave me a sizable pool of data, but with everything I needed on separate lines.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">Time: 18:00:01
avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           0.79    0.03    0.48    0.06    0.00   98.64

Device:            tps   Blk_read/s   Blk_wrtn/s   Blk_read   Blk_wrtn
sda               2.22         0.20        38.52    1948442  373500872
sda1              0.00         0.00         0.00      16224       1848
sda2              2.22         0.20        38.52    1931938  373499024</code></pre></figure>

<p>I gathered all the text files into a single directory, and ran a loop in zsh to create a csv file, ready for easy manipulation in any number of programs.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="k">for </span>each <span class="k">in</span> <span class="sb">`</span><span class="nb">ls</span><span class="sb">`</span>
egrep <span class="nt">-A</span> 1 <span class="s1">'(Time)|(avg-cpu)'</span> <span class="nv">$each</span> |sed s/Time<span class="se">\:\ </span>//g | <span class="nb">grep</span> <span class="nt">-v</span> <span class="s1">'\-\-\|avg-cpu'</span> | <span class="nb">paste</span> <span class="nt">-s</span> <span class="nt">-d</span> <span class="s1">'\ \n'</span> - - | <span class="nb">sed</span> <span class="s1">'s/\( \)\{1,\}/,/g'</span> <span class="o">&gt;</span> <span class="nv">$each</span>.csv</code></pre></figure>

<p>I always start building long lines like this one section at a time. Each section is separated by a pipe, (<code class="highlighter-rouge">|</code>), so the first section in the loop calls egrep.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">egrep <span class="nt">-A</span> 1 <span class="s1">'(Time)|(avg-cpu)'</span> <span class="nv">$each</span></code></pre></figure>

<p>This command alone give us output that looks like this:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">Time: 00:03:39
avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           0.20    0.00    0.10    0.00    0.00   99.70
<span class="nt">--</span>
Time: 00:03:44
avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           0.10    0.00    0.20    0.00    0.00   99.70</code></pre></figure>

<p>The ‚Äú-A‚Äù flag on the egrep command tells egrep to get both the matching line in the text and the line directly below it. The section between the single tics, searches for either ‚ÄúTime‚Äù or ‚Äúavg-cpu‚Äù. This gives me the time and the CPU statistics I‚Äôm interested in. Next, I pipe this output to the next section, a <a href="http://man.cx/sed">sed</a> command that strips out the ‚ÄúTime‚Äù string, so our command now looks like:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">egrep <span class="nt">-A</span> 1 <span class="s1">'(Time)|(avg-cpu)'</span> iostat.ba-rec1  |sed s/Time<span class="se">\:\ </span>//g </code></pre></figure>

<p>And gives us output like:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">00:04:14
avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           0.00    0.00    0.10    0.00    0.00   99.90
<span class="nt">--</span>
00:04:19
avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           0.40    0.00    0.30    0.00    0.00   99.30</code></pre></figure>

<p>The next section uses grep with the ‚Äú-v‚Äù flag, which tells grep to reverse it‚Äôs normal behavior and only return the strings that do <em>not</em> match the search text.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">egrep <span class="nt">-A</span> 1 <span class="s1">'(Time)|(avg-cpu)'</span> iostat.ba-rec1  |sed s/Time<span class="se">\:\ </span>//g | <span class="nb">grep</span> <span class="nt">-v</span> <span class="s1">'\-\-\|avg-cpu'</span></code></pre></figure>

<p>The grep command is looking for either ‚Äúavg-cpu‚Äù or two dashes and removing both lines, giving us:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">00:04:14
           0.00    0.00    0.10    0.00    0.00   99.90
00:04:19
           0.40    0.00    0.30    0.00    0.00   99.30</code></pre></figure>

<p>This is looking much better, but the lines of text are offset from what I need them to be. A post I read recently by <a href="http://www.leancrew.com/all-this/2013/11/two-simple-things/">Dr. Drang</a> reminded me of <a href="http://man.cx/paste">paste</a>, which is perfect for this job:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">egrep <span class="nt">-A</span> 1 <span class="s1">'(Time)|(avg-cpu)'</span> iostat.ba-rec1  |sed s/Time<span class="se">\:\ </span>//g | <span class="nb">grep</span> <span class="nt">-v</span> <span class="s1">'\-\-\|avg-cpu'</span> | <span class="nb">paste</span> <span class="nt">-s</span> <span class="nt">-d</span> <span class="s1">'\ \n'</span> - - </code></pre></figure>

<p>Which puts everything on the same line, nice and clean:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">00:04:14            0.00    0.00    0.10    0.00    0.00   99.90
00:04:19            0.40    0.00    0.30    0.00    0.00   99.30</code></pre></figure>

<p>Only thing left now is to clean up the excess spaces a bit and separate each column by commas, another job for sed, which is only slightly modified from this post on <a href="http://stackoverflow.com/questions/9953448/how-to-remove-all-white-spaces-from-a-given-text-file">StackOverflow</a>, which leads us to the final command:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">egrep <span class="nt">-A</span> 1 <span class="s1">'(Time)|(avg-cpu)'</span> iostat.ba-rec1  |sed s/Time<span class="se">\:\ </span>//g | <span class="nb">grep</span> <span class="nt">-v</span> <span class="s1">'\-\-\|avg-cpu'</span> | <span class="nb">paste</span> <span class="nt">-s</span> <span class="nt">-d</span> <span class="s1">'\ \n'</span> - - | <span class="nb">sed</span> <span class="s1">'s/\( \)\{1,\}/,/g'</span></code></pre></figure>

<p>Which I redirect the output of to a text file, one per server, just like the input from the loop. This, finally, gives us the csv output we were looking for:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">00:04:14,0.00,0.00,0.10,0.00,0.00,99.90
00:04:19,0.40,0.00,0.30,0.00,0.00,99.30</code></pre></figure>

<p>Now it is ready.</p>

:ET