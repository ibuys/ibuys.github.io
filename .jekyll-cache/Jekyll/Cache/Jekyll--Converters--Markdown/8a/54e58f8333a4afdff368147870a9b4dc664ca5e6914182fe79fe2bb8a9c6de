I"/<p>I spent some time over the past couple nights adopting a new theme for the old digs here at jb. I found the <a href="https://github.com/nielsenramon/chalk">beautiful Chalk theme</a> by Nielsen Ramon and adopted my site to use it, including, finally, a working tags system. I’m quite happy with the tags, but I’m less happy with the bundled deployment system the theme shipped with.</p>

<p>The theme depended on NodeJS to build and deploy to GitHub for reasons that I’m sure made complete sense to the developer but I simply don’t care about. The documentation says to run <code class="language-plaintext highlighter-rouge">npm run publish</code> to build and push the site, doing so runs a script that does quite a bit of mucking about with the structure of the site.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Checkout gh-pages branch.</span>
<span class="k">if</span> <span class="o">[</span> <span class="sb">`</span>git branch | <span class="nb">grep </span>gh-pages<span class="sb">`</span> <span class="o">]</span>
<span class="k">then
  </span>git branch <span class="nt">-D</span> gh-pages
<span class="k">fi
</span>git checkout <span class="nt">-b</span> gh-pages

</code></pre></div></div>

<p>First thing we do is create a new branch and check it out. So far so good, I guess.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Build site.</span>
yarn <span class="nb">install</span> <span class="nt">--modules-folder</span> ./_assets/yarn
bundle <span class="nb">exec </span>jekyll build
</code></pre></div></div>

<p>I’m not familier with <code class="language-plaintext highlighter-rouge">yarn</code>, but the site says that it provides “fast, reliable, and secure dependency management”. Ok, fair enough, but what dependencies could my little blog possibly have? Apparently, the <code class="language-plaintext highlighter-rouge">package.json</code> file it lists what <code class="language-plaintext highlighter-rouge">yarn</code> is downloading:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="dl">"</span><span class="s2">dependencies</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">jquery</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^3.2.1</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">npm</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^6.0.1</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">retinajs</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^2.1.1</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">svgxuse</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^1.2.4</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">webfontloader</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^1.6.28</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">zooming</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^2.0.0</span><span class="dl">"</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>Eh… ok. Why do I need NodeJS for this again? So, Yarn installs a bunch of Javascript and then Jekyll builds the site. Moving on…</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Delete and move files.</span>
find <span class="nb">.</span> <span class="nt">-maxdepth</span> 1 <span class="o">!</span> <span class="nt">-name</span> <span class="s1">'_site'</span> <span class="o">!</span> <span class="nt">-name</span> <span class="s1">'.git'</span> <span class="o">!</span> <span class="nt">-name</span> <span class="s1">'.gitignore'</span> <span class="nt">-exec</span> <span class="nb">rm</span> <span class="nt">-rf</span> <span class="o">{}</span> <span class="se">\;</span>
<span class="nb">mv </span>_site/<span class="k">*</span> <span class="nb">.</span>
<span class="nb">rm</span> <span class="nt">-R</span> _site/

</code></pre></div></div>

<p>Now things are getting interesting. This deletes everything except the git directory, the <code class="language-plaintext highlighter-rouge">.gitignore</code> file, and the site Jekyll just built. Then it moves everything out of the <code class="language-plaintext highlighter-rouge">_site</code> directory into the root and deletes that directory as well.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Push to gh-pages.</span>
git add <span class="nt">-fA</span>
git commit <span class="nt">--allow-empty</span> <span class="nt">-m</span> <span class="s2">"</span><span class="si">$(</span>git log <span class="nt">-1</span> <span class="nt">--pretty</span><span class="o">=</span>%B<span class="si">)</span><span class="s2"> [ci skip]"</span>
git push <span class="nt">-f</span> <span class="nt">-q</span> origin gh-pages

<span class="c"># Move back to previous branch.</span>
git checkout -
yarn <span class="nb">install</span> <span class="nt">--modules-folder</span> ./_assets/yarn

</code></pre></div></div>
<p>Add, commit, and push the changes to Github under the gh-pages branch, then checkout whatever you had previously and reinstall all the javascript. When I tried this my site went offline. I think this script might be out of date. GitHub requires sites that won’t build in Jekyll to be in the master branch, and if you want to use a custom domain name you have to add a <code class="language-plaintext highlighter-rouge">CNAME</code> file with the domain name you want to use.</p>

<p>To work around this I setup a separate repository just for the source of the site and moved the built site into the master branch of the main repository. But, when I pulled everything down on my MacBook, the site wouldn’t compile, with Jekyll complaining about not being able to find Jquery. It was at this point I knew that I had gone down a terrible rabbit hole.</p>

<p>Luckily, I was able to get the site built once, so I had all the “<em>compiled</em>” code to work with. All I needed to do was use those files to build my own Jekyll theme with static assets and none of this Javascript build nonesene. Apparently the original theme was trying to do something fancy with the assets by dynamically renaming them and adding assets selectively to the compiled site. I don’t care about any of that.</p>

<p>Jekyll uses the liquid templating system, so it’s trivial to go through the site and add tags to pull in the content you need during build time. Using the theme as shipped caused me to need three different package managers to build a static site. That’s just not right. What’s so wrong with HTML, CSS, and just a little bit of Javascript?</p>

<p>I don’t know Nielsen, and I’m sure he had good reasons to build the theme like he did. I do think it’s beautiful and I’m thankful that he released it as open source so I could use it. For me though, I don’t need all those layers in my life. I just want an easy way to write and publish my site, and have it look and feel like something I care to have my name on.</p>

<p>It used to be you could learn how to build a web site by right-clicking and selecting “view source”. But now, <a href="https://frankchimero.com/writing/everything-easy-is-hard-again/">everything easy is hard again</a>.</p>

:ET