I"ó<p>I‚Äôm writing an article for <a href="http://theappleblog.com">TAB</a> about my new blogging engine, <a href="http://jekyllrb.com/">Jekyll</a>. I‚Äôve taken most of the reliance on the command line out of dealing with Jekyll on a day to day basis, and instead have a few Automator workflows in the scripts menu in the Mac menubar. It‚Äôs a great setup, I‚Äôm really enjoying it. I‚Äôm sure there will be quite a bit of enhancement yet to come, but my initial workflow looks like this:</p>

<ol>
  <li>Click ‚ÄúNew Blog Post‚Äù</li>
  <li>Write the article</li>
  <li>Click ‚ÄúRun Jekyll‚Äù</li>
  <li>Make sure everything worked using the local <a href="http://www.webrick.org/">webrick</a> web server.</li>
  <li>Click ‚ÄúKill Jekyll‚Äù</li>
  <li>Click ‚ÄúSync Site‚Äù</li>
</ol>

<p>Here‚Äôs what I‚Äôve got so far in the automator workflows:</p>

<h3 id="new-blog-post">New Blog Post</h3>

<p>First, I run the ‚ÄúAsk for Text‚Äù action to get the name of the post. Then, I run this script:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NAME=`echo $1 | sed s/\ /-/g`
USERNAME=`whoami`
POSTNAME=`date "+%Y-%m-%d"-$NAME`
POST_FQN=/Users/$USERNAME/Sites/_posts/$POSTNAME.markdown
touch $POST_FQN
echo "---" &gt;&gt; $POST_FQN
echo "layout: post" &gt;&gt; $POST_FQN
echo "title: $1" &gt;&gt; $POST_FQN
echo "---" &gt;&gt; $POST_FQN
/usr/bin/mate $POST_FQN
</code></pre></div></div>

<h3 id="run-jekyll">Run Jekyll</h3>

<p>First, I run this script:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>USERNAME=`whoami`
cd /Users/$USERNAME/Sites
/usr/bin/jekyll &gt; /dev/null
/usr/bin/jekyll --server  &gt; /dev/null 2&gt;&amp;1 &amp;
/usr/local/bin/growlnotify --appIcon Automator Jekyll is Done -m 'And there was much rejoicing.'
echo "http://localhost:4000"
</code></pre></div></div>

<p>Followed by the ‚ÄúNew Safari Document‚Äù Automator action. This runs Jekyll which converts the blog post I just wrote in <a href="http://daringfireball.net/projects/markdown/">markdown</a> syntax to html, updates the site navigation, starts the local web server and opens the site in Safari to preview.</p>

<h3 id="kill-jekyll">Kill Jekyll</h3>

<p>Since I start the local server in the last step, I need to kill it in this step. This action does just that.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PID=`ps -eaf | grep "jekyll --server" | grep -v grep | awk '{ print $2 }'`
kill $PID
/usr/local/bin/growlnotify --appIcon Automator Jekyll is Dead -m 'Long Live Jekyll.'
</code></pre></div></div>

<p>This is entered in as a shell script action, and is the only action in this workflow.</p>

<h3 id="sync-site">Sync Site</h3>

<p>Once I‚Äôm certain everything looks good, I run the final Automator action to upload the site:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /Users/USERNAME/Sites/_site/
rsync -avz -e ssh . USERNAME@jonathanbuys.com:/home/USERNAME/jonathanbuys.com/ &gt; /dev/null
/usr/local/bin/growlnotify --appIcon Automator Site Sync Complete -m 'Check it out.'
</code></pre></div></div>

<p>This is also a single Automator action workflow. You‚Äôll notice that I use <a href="http://growl.info/">Growl</a> to notify me that the script is finished. This is also not really necessary, but it‚Äôs fun anyway.</p>

<p>Like I said, there‚Äôs a lot of improvement yet to go, but I think it‚Äôs a solid start. I‚Äôm at a point now where I‚Äôm tempted to start writing a Wordpress import feature, which seems to be the only major piece missing from the Jekyll puzzle. I‚Äôm not sure what this would take just yet, but I‚Äôve got a few ideas.  I haven‚Äôt tried uploading any images or media yet, but since everything is static, I assume it would just be a matter of placing the image in a /images folder and embedding it in html. So far, I‚Äôm having a lot of fun, and that‚Äôs what blogging is really all about.</p>

:ET